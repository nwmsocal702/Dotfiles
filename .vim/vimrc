"----------------Vundle-----------------
set nocompatible         " be improved, required
filetype off             " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'scrooloose/syntastic'

Plugin 'scrooloose/nerdtree'

Plugin 'altercation/vim-colors-solarized'

" Development version available at WolfgangMehner/vim-plugins
Plugin 'vim-scripts/bash-support.vim'

Plugin 'oplatek/Conque-Shell'

Plugin 'bling/vim-airline'

Plugin 'Valloric/YouCompleteMe'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif


" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
set hidden		" Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)
set number
set wrap                "Wrap lines visually one line text multiple lines
set textwidth=79        "Limit text width
"set colorcolumn=80      " Draw line at 80 charachters
set pastetoggle=<F2>
set nocp                " 'Compatible' is not set

set laststatus=2
set statusline=%f         " Path to the file
set statusline+=\ -\      " Separator
set statusline+=FileType: " Label
set statusline+=%y        " Filetype of the file
"set t_Co=16              " Use the 16 colors terminal option
set t_Co=256              " Use 256 colors looks better than 16
set buftype: ""
set hlsearch incsearch    " Highlight search matches
set showmode              " Display current mode
set tabpagemax=15         " Only show 15 tabs
set cursorline            " Highlight current line
set wildmenu              " Visual autocomplete for menu
set wildmode=list:longest,full  " Command Tab completion
set lazyredraw            " redraw only when we need to
set showcmd               " Show partial commands

"--Formatting
set autoindent            " Indent at same level of previous line
set shiftwidth=4          " Use indents of 4 spaces
set expandtab             " Tabs are spaces, not tabs
set tabstop=4             " An indentation every four columns
set softtabstop=4         " Let backspace delete indent
set nojoinspaces          " Prevents inserting 2 spaces after punc on a join
set splitright            " Puts new vsplit windows to the right of current
set splitbelow            " Puts new split windows to the bottom of current

execute "set colorcolumn=" . join(range(80,335), ',')


" Autoreload vimrc file on save
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

"--------------Solarized theme setup-----------------
syntax on
set background=dark
colorscheme solarized

" Option name           default
"-----------------------------------
let g:solarized_termcolors= 16
let g:solarized_termtrans = 0
let g:solarized_degrade   = 0
let g:solarized_bold      = 1
let g:solarized_underline = 1
let g:solarized_italic    = 1
let g:solarized_contrast  = "normal"
let g:solarized_visibility= "normal"


"-------------Syntastic settings--------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:is_bash=1
let g:syntastic_always_populate_loc_list = 0 "location list not filled auto
let g:syntastic_auto_loc_list = 1            "auto open location list
let g:syntastic_check_on_open = 0            "Check on open
let g:syntastic_loc_list_height = 5          "Height of location list
let g:syntastic_check_on_wq = 0              "check on quitting
let g:syntastic_aggregate_errors = 1         "run all checkers and show err
let g:syntastic_id_checkers = 1              "label errors with checker name
let g:syntastic_sh_checkers = ["sh", "shellcheck", "checkbashisms", "bashate"]
let g:syntastic_shell = "/bin/bash"
let g:syntastic_enable_highlighting = 0      " Use highlighting to mark errors
let g:syntastic_enable_balloons = 1          " Display error msgs in baloons
let g:syntastic_enable_highlighting = 1      " Highlight errors
let g:ycm_show_diagnostics_ui = 0
"Control what the statusline contains 
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'

let g:syntastic_mode_map = {
    \ "mode": "active",
    \ "active_filetypes": ["php", "python", "sh", "perl", "bash", "html"],
    \ "passive_filetypes": ["txt"] }

"------------------NERDTree--------------------
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"------------------KEY MAPPING-----------------
nnoremap <S-F9> :!%:p<Enter>     

nnoremap <leader>ev :tabnew $MYVIMRC<CR>       " Opens vimrc for editing
nnoremap <leader>sv :source $MYVIMRC<CR>       " Sources vimrc
nnoremap <leader>eb :tabnew ~/.bashrc<CR>      " Opens bashrc for editing
nnoremap <leader>ez :tabnew ~/.zshrc<CR>       " Opens zshrc for editing
nnoremap <leader>nwm :e scp://matich.org//<CR>:set buftype: ""<CR>

	 
inoremap jk <esc>                              " Maps jk to escape

" Abbreviations
iabbrev @@ nikolas@matich.org
iabbrev ssig -- <CR>Nik Matich<CR>nikolas@matich.org
iabbrev ccopy Copyright 2015 Nik Matich, all rights reserved.

